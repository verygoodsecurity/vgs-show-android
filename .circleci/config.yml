version: 2.1
aliases:
  - &test_environment
    working_directory: ~/code
    docker:
      - image: circleci/android:api-29

  - &restore_gem_cache
    name: Restore cache
    keys:
      - jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  - &save_gem_cache
    name: Saving cache
    key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
    paths:
      - ~/.gradle

  - &attach_workspace
    attach_workspace:
      at: ~/code

  - &download_dep
    - checkout
    - *attach_workspace
    - run:
        name: Download Dependencies
        command: |
          sudo chmod +x gradlew
          ./gradlew androidDependencies

  - &run_lint
    - checkout
    - *attach_workspace
    - restore_cache: *restore_gem_cache
    - run:
        name: Run Lint
        command: ./gradlew lintDebug
    - save_cache: *save_gem_cache

  - &run_unit_tests
    - checkout
    - *attach_workspace
    - run:
        name: Run Unit Tests
        command: ./gradlew testDebugUnitTest


  - &assembleDebug
    - checkout
    - *attach_workspace
    - run:
        name: Build Debug
        command: ./gradlew assembleDebug
    - store_artifacts:
        path: app/build/outputs/apk/debug/app-debug.apk
        destination: app-debug.apk

  - &uploadBuild
    - checkout
    - *attach_workspace
    - run:
        name: Upload build
        command: |
          APP_UPLOAD_RESPONSE=$(curl -u "dmytrodmytryshyn1:DyKfpdxjcn5Fh9B324VB" -X POST https://api-cloud.browserstack.com/app-automate/upload -F "file=@app/build/outputs/apk/debug/app-debug.apk")
          APP_ID=$(echo $APP_UPLOAD_RESPONSE | jq -r ".app_url")
          if [ $APP_ID != null ]; then
            echo "Apk uploaded to BrowserStack with app id : ",$APP_ID;
            echo "export BROWSERSTACK_APP_ID=$APP_ID" >> $BASH_ENV;
            source $BASH_ENV;
            echo "Setting value of BROWSERSTACK_APP_ID in environment variables to  ",$APP_ID;
          else
            UPLOAD_ERROR_MESSAGE=$(echo $APP_UPLOAD_RESPONSE | jq -r ".error")
            echo "App upload failed, reason : ",$UPLOAD_ERROR_MESSAGE
            exit 1;
          fi

  # dependency groups
  - &prepare_sources
    - "Prepared_Sources"

  - &all_test
    - "Run_Lint"
    - "Run_Unit_Tests"

  - &debug_build
    - "Assemble_Debug_Build"

jobs:
  "Prepared_Sources":
    <<: *test_environment
    environment:
      JVM_OPTS: -Xmx3200m
    steps: *download_dep

  "Run_Lint":
    <<: *test_environment
    environment:
      JVM_OPTS: -Xmx3200m
    steps: *run_lint

  "Run_Unit_Tests":
    <<: *test_environment
    environment:
      JVM_OPTS: -Xmx3200m
    steps: *run_unit_tests

  "Assemble_Debug_Build":
    <<: *test_environment
    environment:
      JVM_OPTS: -Xmx3200m
    steps: *assembleDebug

  "Upload_buuild":
    <<: *test_environment
    environment:
      JVM_OPTS: -Xmx3200m
    steps: *uploadBuild

workflows:
  version: 2.1
  main:
    jobs:
      - "Prepared_Sources"
      - "Run_Lint":
          requires:
            *prepare_sources
      - "Run_Unit_Tests":
          requires:
            *prepare_sources
      - "Assemble_Debug_Build":
          requires:
            *all_test
      - "Upload_buuild":
          requires:
            *debug_build